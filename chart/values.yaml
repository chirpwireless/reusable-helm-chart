# Default values for reusable-helm-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# @param global Global configuration for the chart
# Example:
# global:
#   # Enable metrics annotations for prometheus or scrape config for victoria metrics
#   metrics:
#     enabled: true
#     path: /metrics
#     port: "http"
#   imagePullSecrets:[]
#   # Create ClusterRole/Role and ClusterRoleBinding/RoleBinding
#   rbac:
#       create: false
#       # Name of the ClusterRole/Role and ClusterRoleBinding/RoleBinding
#       # Default value is {{ include "tvpp-helm-chart.fullname" . }}
#       name: ""
#       # If true - Role and RoleBinding will be created
#       # If false - ClusterRole and ClusterRoleBinding will be created
#       namespaced: false
#       aggregationRule: {}
#       rules: []
#       annotations: {}
#   serviceAccount:
#     create: false
#     annotations: {}
#     # The name of the service account to use.
#     # If not set and create is true, a name is generated using the fullname template
#     name: ""
#
global:
  metrics:
    enabled: true
    path: /metrics
    port: "http"
    scrapeTimeout: 10s
    interval: 60s
  imagePullSecrets: []
  rbac:
    create: false
    name: ""
    namespaced: false
    aggregationRule: {}
    rules: []
    annotations: {}
  serviceAccount:
    create: false
    annotations: {}
    name: ""

# @param deployment Deployment configuration for the chart
# Deployment is used by default
# Example:
# deployment:
#   # Can't be enabled: true together with statefulset.enabled: true
#   enabled: true
#   strategy:[]
#
deployment:
  enabled: true
  strategy:
    type: RollingUpdate

# @param statefulset Statefulset configuration for the chart
# Example:
# statefulset:
#   # Can't be enabled: true together with deployment.enabled: true
#   enabled: true
#
statefulset:
  enabled: false

nameOverride: ""
fullnameOverride: ""

# @param replicaCount Number of replicas for deployment and statefulset
# Example:
# replicaCount: 2
#
replicaCount: 2

# @param image Image configuration for application
# Repository param is *REQUIRED*
# Example:
# image:
#   repository: ""
#   pullPolicy: IfNotPresent
#
image:
  repository: "gcr.io/google_containers/echoserver"
  pullPolicy: IfNotPresent

# @param extraEnv Extra environment variables to be set on application container
# Example:
# extraEnv:
#   - name: FOO
#     value: "bar"
#
extraEnv: []

# @param extraConfigMap Extra configmaps to be set on application container
# Example:
# extraConfigMap:
#   - name: FOO
#     mountPath: /mount/path/to/
#     subPath: /if/needed
#     data:
#       key: value
#
extraConfigMap: []

# @param extraEnvFrom Additional environment variables for application mapped from Secret or ConfigMap
# Example:
# extraEnvFrom:
#   - configMapRef:
#       name: FOO
#   - secretRef:
#       name: FOO
#
extraEnvFrom: []

# @param extraMemoryMount Extra memory mounts for application container
# Example:
# extraMemoryMount:
#   - name: FOO
#     mountPath: /mount/path/to
#     subPath: /if/needed
#     sizeLimit: 500Mi
extraMemoryMount: []

# @param command Command to run in the container
# Example:
# command: "echo hello"
#
command: ""

# @param initContainers List of init containers for the application
# Example:
# initContainers:
#   - name: init-container-name
#     image:
#       repository: ""
#       pullPolicy: IfNotPresent
#       tag: ""
#     extraEnv:
#       - name: FOO
#         value: "bar"
#     extraEnvFrom:
#       - configMapRef:
#           name: FOO
#       - secretRef:
#           name: FOO
#     extraConfigMap:
#       - name: FOO
#         mountPath: /mount/path/to/
#         subPath: /if/needed
#         data:
#           key: value
#     extraMemoryMount:
#       - name: FOO
#         mountPath: /mount/path/to
#         subPath: /if/needed
#         sizeLimit: 500Mi
#     command: ""
#
initContainers: []

# @param sidecars List of sidecar containers for the application
# Example:
# sidecars:
#   - name: sidecar-container-name
#     image:
#       repository: ""
#       pullPolicy: IfNotPresent
#       tag: ""
#     extraEnv:
#       - name: FOO
#         value: "bar"
#     extraEnvFrom:
#       - configMapRef:
#           name: FOO
#       - secretRef:
#           name: FOO
#     extraConfigMap:
#       - name: FOO
#         mountPath: /mount/path/to/
#         subPath: /if/needed
#         data:
#           key: value
#     extraMemoryMount:
#       - name: FOO
#         mountPath: /mount/path/to
#         subPath: /if/needed
#         sizeLimit: 500Mi
#     command: ""
#
sidecars: []

# @param externalSecrets External secrets for the application
# Only available for Kubernetes
# Example:
# externalSecrets:
#   name-of-the-secret:
#     # Name of the secret store
#     secretStoreName: vault-backend
#     # Path to vault secret
#     secretPath: path/to/secret
#     properties:
#       # Mapping vault_property: secret_property
#       property1: secret_property1
#       property2: secret_property2
externalSecrets: {}

# @param podAnnotations Annotations object for application
# Example:
# podAnnotations:
#   application.framework: "golang"
#
podAnnotations: {}

# @param podSecurityContext Security context for the whole deployment
# Example:
# podSecurityContext:
#   fsGroup: 2000
#
podSecurityContext: {}

# @param securityContext Security context for the application container
# Example:
# securityContext:
#   capabilities:
#     drop:
#     - ALL
#   readOnlyRootFilesystem: true
#   runAsNonRoot: true
#   runAsUser: 1000
#
securityContext: {}

# @param service Service configuration for the application
# Example:
# service:
#   type: ClusterIP
#   ports:
#     - port: 80
#       targetPort: 8080
#       name: http
#
service:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 8080
      name: http

# @param cronjob list
# Example:
# - name: cronjob-name
#   image:
#     repository: ""
#     pullPolicy: ""
#     tag: ""
#   schedule: ""
#   successfulJobsHistoryLimit: 1
#   failedJobsHistoryLimit: 3
#   extraEnv:
#     - name: FOO
#       value: "bar"
#   extraEnvFrom:
#     - configMapRef:
#         name: FOO
#     - secretRef:
#         name: FOO
#   extraConfigMap:
#     - name: FOO
#       mountPath: /mount/path/to/
#       subPath: /if/needed
#       data:
#         key: value
#   extraMemoryMount:
#     - name: FOO
#       mountPath: /mount/path/to
#       subPath: /if/needed
#       sizeLimit: 500Mi
#   command: ""
#   podAnnotations: {}
#   nodeSelector: {}
#
cronjob: []

# @param ingress Ingress for the application
# Example:
# ingress:
#   enabled: false
#   className: ""
#   annotations:
#     kubernetes.io/ingress.class: nginx
#     kubernetes.io/tls-acme: "true"
#   hosts:
#     - host: chart-example.local
#       paths:
#         - path: /
#           pathType: ImplementationSpecific
#   tls:
#     - secretName: chart-example-tls
#       hosts:
#         - chart-example.local
#
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts: []
  tls: []

# @param resources Resources for the application
# Example:
# resources:
#   limits:
#     cpu: 1000m
#     memory: 2000Mi
#   requests:
#     cpu: 100m
#     memory: 1000Mi
#
resources:
  limits:
    memory: 2000Mi
  requests:
    cpu: 200m
    memory: 1000Mi

# @param startupProbe StartupProbe for the application
# Example:
# startupProbe:
#   failureThreshold: 50
#   periodSeconds: 10
#   httpGet:
#     path: /health
#     port: http
#     scheme: HTTP
#   grpc:
#     port: 8080
#     service: my.service.name
#
startupProbe: {}

# @param livenessProbe LivenessProbe for the application
# Example:
# livenessProbe:
#   failureThreshold: 5
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   successThreshold: 1
#   timeoutSeconds: 1
#   httpGet:
#     path: /health
#     port: http
#     scheme: HTTP
#   grpc:
#     port: 8080
#     service: my.service.name
#
livenessProbe: {}

# @param readinessProbe ReadinessProbe for the application
# Example:
# readinessProbe:
#   failureThreshold: 5
#   initialDelaySeconds: 0
#   periodSeconds: 10
#   successThreshold: 1
#   timeoutSeconds: 1
#   httpGet:
#     path: /health
#     port: http
#     scheme: HTTP
#   grpc:
#     port: 8080
#     service: my.service.name
#
readinessProbe: {}

# @param autoscaling Autoscaling for the application
# Example:
# autoscaling:
#   enabled: false
#   minReplicas: 2
#   maxReplicas: 10
#   behavior:
#     scaleUp:
#       policies:
#         # Scale Up As Fast As Possible
#         # 1 -> 2 -> 4 -> 8 ...
#         - type: Percent
#           value: 100
#           periodSeconds: 60
#     scaleDown:
#       policies:
#         # Scale Down Very Gradually
#         # Scale down one pod every 10 min
#         - type: Pods
#           value: 1
#           periodSeconds: 600
#   targetCPUUtilizationPercentage: 80
#   targetMemoryUtilizationPercentage: 80
#
autoscaling:
  enabled: false
  minReplicas: 2
  maxReplicas: 10
  behavior:
    scaleUp:
      # Do not want to react to false positive signals, i.e. to short spikes of events
      stabilizationWindowSeconds: 300
      policies:
        # Scale Up As Fast As Possible
        # 1 -> 2 -> 4 -> 8 ...
        - type: Percent
          value: 100
          periodSeconds: 60
    scaleDown:
      # Do not scale down pods too early, expecting some late load spikes
      stabilizationWindowSeconds: 600
      policies:
        # Scale Down Very Gradually
        # Scale down one pod every 10 min
        - type: Pods
          value: 1
          periodSeconds: 600
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# @param nodeSelector NodeSelector for the application
# Example:
# nodeSelector: {}
#
nodeSelector: {}

# @param tolerations Tolerations for the application
# Example:
# tolerations: []
#
tolerations: []
